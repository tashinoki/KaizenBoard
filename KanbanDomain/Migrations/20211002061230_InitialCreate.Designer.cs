// <auto-generated />
using System;
using KanbanDomain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KanbanDomain.Migrations
{
    [DbContext(typeof(KanbanContext))]
    [Migration("20211002061230_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Contract.Entity.Kanban", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("board_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("Sequence")
                        .HasColumnType("int")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("pk_kanbans");

                    b.ToTable("kanbans");
                });

            modelBuilder.Entity("Contract.Entity.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("HandleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("handle_name");

                    b.Property<Guid?>("MyTaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("my_task_id");

                    b.HasKey("Id")
                        .HasName("pk_member");

                    b.HasIndex("MyTaskId")
                        .HasDatabaseName("ix_member_my_task_id");

                    b.ToTable("member");
                });

            modelBuilder.Entity("Contract.Entity.MyTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("KanbanId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("kanban_id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_my_task");

                    b.HasIndex("KanbanId")
                        .HasDatabaseName("ix_my_task_kanban_id");

                    b.ToTable("my_task");
                });

            modelBuilder.Entity("Contract.Entity.TaskTimer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("FinishedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("finished_at");

                    b.Property<bool>("IsFinised")
                        .HasColumnType("bit")
                        .HasColumnName("is_finised");

                    b.Property<Guid?>("MyTaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("my_task_id");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("started_at");

                    b.HasKey("Id")
                        .HasName("pk_task_timer");

                    b.HasIndex("MyTaskId")
                        .HasDatabaseName("ix_task_timer_my_task_id");

                    b.ToTable("task_timer");
                });

            modelBuilder.Entity("Contract.Entity.Member", b =>
                {
                    b.HasOne("Contract.Entity.MyTask", null)
                        .WithMany("Members")
                        .HasForeignKey("MyTaskId")
                        .HasConstraintName("fk_member_my_task_my_task_id");
                });

            modelBuilder.Entity("Contract.Entity.MyTask", b =>
                {
                    b.HasOne("Contract.Entity.Kanban", "Kanban")
                        .WithMany("Tasks")
                        .HasForeignKey("KanbanId")
                        .HasConstraintName("fk_my_task_kanbans_kanban_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kanban");
                });

            modelBuilder.Entity("Contract.Entity.TaskTimer", b =>
                {
                    b.HasOne("Contract.Entity.MyTask", null)
                        .WithMany("Timers")
                        .HasForeignKey("MyTaskId")
                        .HasConstraintName("fk_task_timer_my_task_my_task_id");
                });

            modelBuilder.Entity("Contract.Entity.Kanban", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Contract.Entity.MyTask", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Timers");
                });
#pragma warning restore 612, 618
        }
    }
}
